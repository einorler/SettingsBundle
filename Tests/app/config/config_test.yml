imports:
    - { resource: parameters_test.yml }
    - { resource: security.yml }

# Framework Configuration
framework:
    esi:             ~
    fragments:       { path: /_proxy }
    translator:      { fallback: "%locale%" }
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: %kernel.debug%
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: 201204261
        assets_base_urls:
            http: [%cdn_url%]
            ssl: [%cdn_url_ssl%]
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:
        storage_id: session.storage.mock_file
    test: ~

monolog:
    handlers:
        main:
            type:   stream
            path:   "%kernel.logs_dir%/%kernel.environment%.log"
            level:  notice
        console:
            type:   console
            bubble: false

stash:
    caches:
        default:
            drivers: [ FileSystem ]
            FileSystem: ~

#Elasticsearch Bundle
ongr_elasticsearch:
    connections:
        default:
            hosts:
                - 127.0.0.1:9200
            index_name: ongr-settings-test
            settings:
                number_of_shards: 2
                number_of_replicas: 0
                index:
                    refresh_interval: -1

    managers:
        default:
            connection: default
            mappings:
              - ONGRSettingsBundle

services:

    ongr_settings.dummy_service:
        class: ONGR\SettingsBundle\Tests\Functional\DependencyInjection\DummyService
        tags:
            - { name: 'ongr_settings.setting_aware', setting: 'setting_1' }

    ongr_settings.dummy_profile_provider:
        class: ONGR\SettingsBundle\Settings\General\Provider\ManagerAwareSettingProvider
        arguments: [domain_foo]
        calls:
            - [setManager, [@es.manager]]

    ongr_settings.settings_manager:
        class: ONGR\SettingsBundle\Settings\General\SettingsManager
        arguments:
            - @translator
            - @event_dispatcher
            - @es.manager

    ongr_settings.listener.cookie_profile:
        class: ONGR\SettingsBundle\EventListener\ProfileRequestListener
        calls:
            - [ setSettingsContainer, [ @ongr_settings.settings_container ] ]
            - [ setPersonalSettingsManager, [ @ongr_settings.settings.personal_settings_manager ] ]
            - [ setManager, [ @es.manager ] ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    ongr_settings.profiles_manager:
        class: ONGR\SettingsBundle\Service\ProfileManager
        arguments:
            - @es.manager

    ongr_settings.settings_provider:
        class: ONGR\SettingsBundle\Settings\Personal\ProfilesManager
        arguments:
            - @es.manager

ongr_settings:
    profiles: [ test1, test2, default, meh ]
    connection:
        repository: es.manager.default.setting
    user_settings:
        categories:
            category_1:
                name: Category 1
                description: cat_desc_1
            category_2:
                name: Category 2

        settings:
            foo_setting_1:
                name: Foo Setting 1
                category: category_1
                description: 'foo_desc_1'
            foo_setting_2:
                name: Foo Setting 2
                category: category_1
            foo_setting_3:
                name: Foo Setting 3
                category: category_2
                description: 'foo_desc_3'
            ongr_settings_live_settings:
                name: Show settings widget in frontend
                category: category_1
